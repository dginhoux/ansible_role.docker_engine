---
- name: Prefix containerd package version
  when:
    - containerd_package_version | length > 0
  block:
    - name: Prefix the containerd package version with the correct separator on redhat
      when:
        - ansible_os_family == 'RedHat'
      ansible.builtin.set_fact:
        _containerd_package_version: "-{{ containerd_package_version }}"

    - name: Prefix the containerd package version with the correct separator on debian
      when: 
        - ansible_os_family == 'Debian'
      ansible.builtin.set_fact:
        _containerd_package_version: "={{ containerd_package_version }}"

- name: Install containerd
  ansible.builtin.package:
    name: "{{ containerd_package_name }}{{ _containerd_package_version | default('') }}"
    state: "{{ containerd_package_state }}"
#   when: ansible_os_family != 'RedHat'
#         or
#         (ansible_os_family == 'RedHat' and ansible_distribution_major_version != '8')

# - name: install containerd on redhat 8
#   ansible.builtin.package:
#     name: "https://download.docker.com/linux/centos/7/x86_64/stable/Packages/containerd.io-1.2.6-3.3.el7.x86_64.rpm"
#     state: "{{ containerd_package_state }}"
#   when: ansible_os_family == 'RedHat' and ansible_distribution_major_version == '8'

- name: Manage systemd containerd service
  when:
    - containerd_service_override | length > 0
    - ansible_service_mgr == 'systemd'
  block:
    - name: Create the systemd overrides directory for containerd
      ansible.builtin.file:
        name: "/etc/systemd/system/containerd.service.d"
        state: directory
        owner: root
        group: root
        mode: "0755"

    - name: Override the systemd unit for containerd
      register: _containerd_systemd_override
      ansible.builtin.template:
        src: containerd-override.conf.j2
        dest: "/etc/systemd/system/containerd.service.d/override.conf"
        owner: root
        group: root
        mode: "0644"

    - name: Reload systemd and restart containerd
      when:
        - _containerd_systemd_override.changed
      ansible.builtin.service:
        name: containerd
        state: "{% if containerd_service_state != 'stopped' %}restarted{% else %}stopped{% endif %}"
        daemon_reload: true

- name: Enable the containerd daemon service and start it
  ansible.builtin.service:
    name: containerd
    state: "{{ containerd_service_state }}"
    enabled: "{{ containerd_service_enabled }}"
